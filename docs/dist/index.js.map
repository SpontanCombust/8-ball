{
  "version": 3,
  "sources": ["../../docs/dist/Vec2.js", "../../docs/dist/Ball.js", "../../docs/dist/index.js"],
  "sourcesContent": ["const _Vec2 = class {\n  constructor(x, y) {\n    this.x = x ? x : 0;\n    this.y = y ? y : 0;\n  }\n  len() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n  normalized() {\n    const len = this.len();\n    const normX = this.x / len;\n    const normY = this.y / len;\n    return new _Vec2(isNaN(normX) ? 0 : normX, isNaN(normY) ? 0 : normY);\n  }\n  toString() {\n    return `[${this.x}, ${this.y}]`;\n  }\n  static sum(v1, v2) {\n    return new _Vec2(v1.x + v2.x, v1.y + v2.y);\n  }\n  static diff(v1, v2) {\n    return new _Vec2(v1.x - v2.x, v1.y - v2.y);\n  }\n  static scaled(v, s) {\n    return new _Vec2(v.x * s, v.y * s);\n  }\n  static dot(v1, v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n};\nlet Vec2 = _Vec2;\nVec2.ZERO = new _Vec2(0, 0);\nVec2.UP = new _Vec2(0, -1);\nVec2.DOWN = new _Vec2(0, 1);\nVec2.LEFT = new _Vec2(-1, 0);\nVec2.RIGHT = new _Vec2(1, 0);\nexport default Vec2;\n", "import Vec2 from \"./Vec2.js\";\nconst _Ball = class {\n  constructor(position, radius) {\n    this.mass = 1;\n    this.pushForce = new Vec2();\n    this.acceleration = new Vec2();\n    this.velocity = new Vec2();\n    this.position = position;\n    this.radius = radius;\n  }\n  resolveCollision(other) {\n    const posDiff = Vec2.diff(other.position, this.position);\n    const radiusSum = this.radius + other.radius;\n    const intersectLen = radiusSum - posDiff.len();\n    if (intersectLen > 0) {\n      const displacement = Vec2.scaled(posDiff.normalized(), intersectLen / 2);\n      this.position = Vec2.diff(this.position, displacement);\n      other.position = Vec2.sum(other.position, displacement);\n      return true;\n    }\n    return false;\n  }\n  resistanceForce() {\n    return Vec2.scaled(this.velocity.normalized(), -_Ball.RESISTANCE_FORCE_MAGN);\n  }\n  applyPushForce(f) {\n    this.pushForce = f;\n    let finalForce = Vec2.diff(f, this.resistanceForce());\n    this.acceleration = Vec2.scaled(finalForce, 1 / this.mass);\n  }\n  resetPushForce() {\n    this.pushForce = Vec2.ZERO;\n  }\n  impact(other) {\n    const dirToImpacted = Vec2.diff(other.position, this.position).normalized();\n    const angleOfAttackDotProd = Vec2.dot(this.velocity.normalized(), dirToImpacted);\n    const transferredMomentum = Vec2.scaled(dirToImpacted, angleOfAttackDotProd * this.velocity.len());\n    other.velocity = Vec2.sum(other.velocity, transferredMomentum);\n    this.velocity = Vec2.diff(this.velocity, transferredMomentum);\n  }\n  update(dt) {\n    let finalForce;\n    if (this.pushForce.len() >= this.resistanceForce().len()) {\n      finalForce = Vec2.diff(this.pushForce, this.resistanceForce());\n    } else if (this.velocity.len() > 1e-4) {\n      finalForce = this.resistanceForce();\n    } else {\n      finalForce = Vec2.ZERO;\n    }\n    this.acceleration = Vec2.scaled(finalForce, 1 / this.mass);\n    this.velocity = Vec2.sum(this.acceleration, this.velocity);\n    this.position = Vec2.sum(this.position, Vec2.scaled(this.velocity, dt));\n  }\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.position.x, this.position.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = \"blue\";\n    ctx.fill();\n    ctx.lineWidth = 3;\n    ctx.stroke();\n  }\n};\nlet Ball = _Ball;\nBall.RESISTANCE_FORCE_MAGN = 0.5;\nexport default Ball;\n", "import Ball from \"./Ball.js\";\nimport Vec2 from \"./Vec2.js\";\nconst canvas = document.getElementById(\"canvas\");\ncanvas.width = canvas.offsetWidth;\ncanvas.height = canvas.offsetHeight;\nconst ctx = canvas.getContext(\"2d\");\nconst balls = [\n  new Ball(new Vec2(canvas.width / 2 - 200, canvas.height / 2), 50),\n  new Ball(new Vec2(canvas.width / 2 + 200, canvas.height / 2), 50)\n];\nconst DELTA_TIME_SEC = 1 / 60;\nfunction gameLoop() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  for (let ball of balls) {\n    ball.update(DELTA_TIME_SEC);\n  }\n  for (let i = 0; i < balls.length; i++) {\n    for (let j = i + 1; j < balls.length; j++) {\n      if (balls[i].resolveCollision(balls[j])) {\n        balls[i].impact(balls[j]);\n      }\n    }\n  }\n  for (let ball of balls) {\n    ball.draw(ctx);\n  }\n}\ncanvas.addEventListener(\"mousedown\", (ev) => {\n  let f = Vec2.diff(new Vec2(ev.x, ev.y), balls[0].position);\n  f = Vec2.scaled(f, 1 / 100);\n  balls[0].applyPushForce(f);\n});\ncanvas.addEventListener(\"mouseup\", (ev) => {\n  balls[0].resetPushForce();\n});\nsetInterval(gameLoop, DELTA_TIME_SEC * 1e3);\nexport {};\n"],
  "mappings": "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",
  "names": []
}
